const parser = require('@babel/parser');
const crypto = require('crypto');

function parse(input, allowReturnOutsideFunction = false, jsx = false) {
  return parser.parse(input.toString(), {
    sourceType: 'module',
    allowReturnOutsideFunction,
    plugins: jsx ? ['jsx'] : []
  });
}

async function parseAsync(input, allowReturnOutsideFunction = false, jsx = false, signal) {
  if (signal && signal.aborted) {
    return Promise.reject(new Error('Aborted'));
  }
  return Promise.resolve(parse(input, allowReturnOutsideFunction, jsx));
}

function hash(input) {
  return crypto.createHash('sha256').update(Buffer.isBuffer(input) ? input : Buffer.from(input)).digest().subarray(0,8);
}

function toBase64Url(buf) {
  return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
}

function xxhashBase64Url(input) {
  return toBase64Url(hash(input));
}

function xxhashBase36(input) {
  return BigInt('0x' + hash(input).toString('hex')).toString(36);
}

function xxhashBase16(input) {
  return hash(input).toString('hex');
}

module.exports = {
  parse,
  parseAsync,
  xxhashBase64Url,
  xxhashBase36,
  xxhashBase16
};
